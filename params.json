{"name":"Dev Blog","tagline":"All technical","body":"A Python developer's guide to PowerShell\r\n========================================\r\n\r\nIntroduction\r\n------------\r\n\r\nPython is a great scripting language - it's available by default on Linux and Mac and so it's easy to quickly write a short script that runs on many systems. However, this isn't the case on Windows. You need to install Python or wrap your application to distribute it on Windows, so we need an alternative. Sometimes this is inconvenient, especially if you want to do something simple or deal directly with Windows. This is where PowerShell comes in.\r\n\r\nGetting started\r\n---------------\r\n\r\nPowerShell is a very powerful scripting language and is cmd.exe's successor. It also comes with a capable IDE which you can use for this tutorial. Find *Windows PowerShell ISE* in the Start menu or open *Windows PowerShell* and type the `ise` command to start it. Now let's write our first program.\r\n\r\nIn Python, this is how you'd write a \"hello world\" program:\r\n```python\r\n    print(\"hello, world\")\r\n```\r\nIt's even easier in PowerShell:\r\n```powershell\r\n    \"hello, world\"\r\n```\r\nPowerShell automatically outputs any strings to the screen without any command. That's kind of cheating, so here's the explicit way to do it:\r\n```powershell\r\n    Write-Host \"hello, world\"\r\n```\r\nThe names of PowerShell *cmdlets* are very consistent. They follow what [Microsoft calls](http://msdn.microsoft.com/en-us/library/windows/desktop/ms714428.aspx) a verb-noun pair convention.\r\n\r\nVariables\r\n---------\r\n\r\nVariables are defined by prepending a dollar sign to the variable name.\r\n```powershell\r\n    $a = 5\r\n    $b = 6\r\n```\r\nYou can also do Python style variable swapping:\r\n```powershell\r\n    $a, $b = $b, $a\r\n\r\n    Write-Host a=$a, b=$b\r\n    Write-Host ($a + $b)\r\n```\r\nWithout parentheses, the second Write-Host command would produce \"5 + 6\" instead of \"11\".\r\n\r\nPowershell also supports arrays with mixed types,\r\n\r\n```powershell\r\n  $Array = 2, \"cheese\", 6.5, \"cake\"\r\n\r\n  # Explicit syntax\r\n  $Array = @(5, \"ice\", 3.14, \"cream\")\r\n\r\n  # Inclusive range\r\n  $Array = (1..10)\r\n```\r\n\r\nIt also supports dictionaries: \r\n\r\n```powershell\r\n  $Table = @{\"a\" = \"apple\", \"b\" = \"ball\"}\r\n  $Table[\"a\"] = \"acorn\"\r\n\r\n  # Loop through keys\r\n  foreach ($k in $Table.keys) {\r\n      Write-Host $k\r\n  }\r\n```\r\n\r\nLoops\r\n-----\r\n\r\nWhat if we wanted to print the numbers from 1 to 10. In Python, it would look like this:\r\n```python\r\n    for i in range(1, 11):\r\n        print(i)\r\n```\r\nSimilarly, in PowerShell:\r\n```powershell\r\n    foreach ($i in (1..10)) {\r\n        Write-Host $i\r\n    }\r\n```\r\n\r\nYou could just as easily use a while loop:\r\n```powershell\r\n    $i = 1\r\n    while ($i -le 10) {\r\n        Write-Host $i\r\n        # Increment i\r\n        $i++\r\n    }\r\n```\r\n\r\nAnother interesting loop method is do...until:\r\n```powershell\r\n    $i = o\r\n    do {\r\n        $i++\r\n        Write-Host $i\r\n    } until ($i -eq 10)\r\n```\r\n\r\nConditions\r\n----------\r\n\r\nConditions look slightly differently in PowerShell:\r\n```powershell\r\n    # Equal to\r\n    $True -eq $False # False\r\n    # Not equal to\r\n    $True -ne $False # True\r\n\r\n    # Less than\r\n    5 -lt 10 # True\r\n    # Greater than\r\n    5 -gt 10 # False\r\n   \r\n    # Less than or equal to\r\n    5 -le 10 # True\r\n    # Greater than or equal to\r\n    5 -ge 10 # False\r\n```\r\nPowerShell supports the same logical operators as Python including `-and`, `-or`, and `-not`.\r\n```powershell\r\n    # Logical operators\r\n    $Happy = $True\r\n    $KnowIt = $True\r\n\r\n    if ($Happy -and $KnowIt) {\r\n        \"Clap hands!\"\r\n    }\r\n```\r\nFunctions\r\n---------\r\n\r\nA typical Fibonacci function in Python looks like this:\r\n```python\r\n    def fib(n):\r\n        if n < 2:\r\n            return n\r\n        return fib(n - 2) + fib(n - 1)\r\n```\r\nTo define a function in PowerShell, use the `Function` keyword:\r\n```powershell\r\n    Function Fib($n) {\r\n        if ($n -lt 2) {\r\n            return $n    \r\n        }\r\n        return (Fib($n - 2)) + (Fib($n - 1))\r\n    }\r\n```\r\nAgain, the parentheses around the `fib` calls are important to properly return a value.   \r\n\r\nList comprehensions\r\n-------------------\r\n\r\nTo get a list of all the multiples of 2 from 1 to 20, you'd do this in Python:\r\n```python\r\n    multiples = [i for i in range(1, 21) if i % 2 == 0]\r\n```\r\nPowerShell:\r\n```powershell\r\n    $Multiples = 1..20 | Where-Object {$_ % 2 -eq 0}\r\n```\r\nThe list comprehensions are somewhat different than in Python and make use of piping, which is a very powerful tool in PowerShell. In this case, a range from 1 to 20 is piped to the Where-Object command which filters the list of items according to the condition `$_ % 2 -eq 0`. The `$_` variable essentially refers to each item in a list of objects.\r\n\r\nTo do an operation on each multiple of two, say find its square, we pipe the multiples to the `ForEach-Object`:\r\n```powershell\r\n    $Squares = $Multiples | ForEach-Object {$_ * $_}\r\n```\r\nYou can also do it all on one line:\r\n```powershell\r\n    $Squares = 1..20 | ? {$_ % 2 -eq 0} | % {$_ * $_}\r\n```\r\nThe `?` is an alias for `Where-Object` and `%` is an alias for `ForEach-Object`.\r\n\r\nExample program\r\n---------------\r\n\r\nI've written a short program in both Python and PowerShell that downloads one or more xkcd comics.\r\n\r\nPython:\r\n```python\r\n    import os\r\n    from urllib.request import urlopen\r\n    from html.parser import HTMLParser\r\n\r\n    # Parse xkcd page\r\n    class Parser(HTMLParser):\r\n        def __init__(self):\r\n            super().__init__()\r\n            self.is_comic = False\r\n\r\n        def handle_starttag(self, tag, attrs):\r\n            attrs = dict(attrs)\r\n            # If found 'comic' div, then next img has comic link\r\n            if tag == 'div' and 'id' in attrs:\r\n                if attrs['id'] == 'comic':\r\n                    self.is_comic = True\r\n\r\n            # Set self.url to comic image url\r\n            elif tag == 'img' and self.is_comic:\r\n                self.url = attrs['src']\r\n                self.is_comic = False\r\n\r\n\r\n    def get_xkcd(n=''):\r\n        # Path to xkcd folder on Desktop\r\n        folder = os.path.join(os.path.expanduser(\"~\"), \"Desktop/xkcd\")\r\n\r\n        # If folder doesn't exist, create one\r\n        if not os.path.exists(folder):\r\n            os.makedirs(folder)\r\n\r\n        # Download comic page\r\n        url = 'http://xkcd.com/{}'.format(n)\r\n        page = urlopen(url).read().decode('utf-8')\r\n\r\n        # Get image url from parser\r\n        parser = Parser()\r\n        parser.feed(page)\r\n\r\n        image_name = parser.url.split('/')[-1]\r\n        path = os.path.join(folder, image_name)\r\n\r\n        with open(path, 'wb') as f:\r\n            f.write(urlopen(parser.url).read())\r\n\r\n    # Get a bunch of comics\r\n    for i in range(1200, 1212):\r\n        get_xkcd(i)\r\n        print('Downloaded xkcd #{}'.format(i))\r\n```\r\nPowerShell:\r\n```powershell\r\n    # Function to download xkcd comic. Get latest one if no $n is provided\r\n    Function GetXkcd($n='') {\r\n        # Path to xkcd folder on Desktop. Trailing backtick for line continuation \r\n        $folder = Join-Path -Path ([Environment]::GetFolderPath(\"Desktop\")) `\r\n                            -ChildPath 'xkcd'\r\n\r\n        # If folder doesn't exist, create one\r\n        if (!(Test-Path -Path $folder)) {\r\n            New-Item $folder -Type Directory\r\n        }\r\n\r\n        # Initiate web request (requires PowerShell 3)\r\n        $result = Invoke-WebRequest (\"http://xkcd.com/{0}\" -f $n)\r\n        # Get 'src' property of second img tag (contains comic url)\r\n        $url = ($result.AllElements | where tagName -eq img)[1].src\r\n\r\n        # Join folder path with image file name\r\n        $destination =  Join-Path -Path $folder `\r\n                                  -ChildPath ((Split-Path -Leaf $url))\r\n\r\n        # Download image\r\n        $wc = New-Object System.Net.WebClient\r\n        $wc.DownloadFile($url, $destination)\r\n    }\r\n\r\n    # Get a bunch of comics\r\n    foreach ($i in 1200..1211) {\r\n        GetXkcd $i\r\n        \"Downloaded xkcd #{0}\" -f $i\r\n    }\r\n```\r\n\r\nNotes\r\n-----\r\nYou might have to change your PowerShell [execution policy](http://technet.microsoft.com/en-us/library/ee176961.aspx) to run scripts. To do this, run PowerShell as Administrator and type `Set-ExecutionPolicy RemoteSigned`.\r\n\r\nA great way to learn about PowerShell is to use the `Get-Help` cmdlet. Simply type `Get-Help` followed by any other cmdlet to get more information about it. You can update your help files to be more comprehensive by running `Update-Help` as an administrator.\r\n\r\nYou can use [IE to parse HTML](http://dmitrysotnikov.wordpress.com/2012/08/06/new-in-powershell-3-parse-html-without-ie-object-unless-a-local-file/) instead of `Invoke-WebRequest` if you don't have PowerShell 3.\r\n\r\nConclusions\r\n-----------\r\n\r\nThis is just scratching the surface of PowerShell by covering the syntax basics. The real power of PowerShell comes from piping and the various types of cmdlets that come built in to the language, similar to the Python standard library. You also get a nice IDE to boot - and it's already on your Windows machine.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}